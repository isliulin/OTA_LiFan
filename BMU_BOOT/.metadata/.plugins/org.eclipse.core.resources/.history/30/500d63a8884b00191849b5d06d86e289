
#include "MAIN.h"

uint8 Boot_Flash[256];

/*************************************************************************/
/*
Function:		void UdsFunc_SID_TRADATA_Callback
				(uint8 *ui8_pRes, uint16 *ui16_pResLen)

Description: 	此函数用于SID_TRADATA服务回调

Parameters: 	ui8_pRes(不含SID和SubID)
				ui16_pResLen

Return:       	boolean

Return Values:  E_OK		任务完成
				E_NOT_OK	任务未完成

Remarks:

Example:
*/
uint32 ui32_TRDATACount = 0;
uint8 ui8_TRDATAFlag = 1;
boolean UdsFunc_SID_TRADATA_Callback
	(uint8 *ui8_pInd, uint8 *ui8_pRes, uint16 *ui16_pResLen)
{
	boolean	b_Return;
	uint16 uin16_Loop;

	b_Return = E_NOT_OK;

	uint32 uin32_WriteAddress;

	if((Fls_GetStatus() == FLS_TASK_IDLE_STATE) && (ui8_TRDATAFlag == 1))
	{
		memset(Boot_Flash, 0, 256U);

		/*数据准备*/
		for(uin16_Loop = 0U; uin16_Loop < 256U; uin16_Loop++)
		{
			Boot_Flash[uin16_Loop] = ui8_pInd[uin16_Loop + 1U];
		}

		/*地址准备*/
		if((st_Uds_SID_RDD_Info.ui32_memoryAddress >= 0xD4000000) && ((st_Uds_SID_RDD_Info.ui32_memoryAddress < 0xD4FFFFFF)))
		{
			/*因观致车厂要求，提供的flash驱动*/
		}
		else
		{
			st_Uds_SID_RDD_Info.ui16_pageCount = ui8_pRes[0] + 256U * st_Uds_SID_RDD_Info.ui8_pageFlag;

			if(ui8_pRes[0] == 0xFF)
			{
				st_Uds_SID_RDD_Info.ui8_pageFlag++;
			}

			uin32_WriteAddress = st_Uds_SID_RDD_Info.ui32_memoryAddress + (st_Uds_SID_RDD_Info.ui16_pageCount - 1) * 256U;
	//		st_Uds_SID_RDD_Info.ui32_memorySize = st_Uds_SID_RDD_Info.ui32_memorySize - 256U;

	//		Test1[0] = (uint8)(uin32_WriteAddress>>24&0xFF);
	//		Test1[1] = (uint8)(uin32_WriteAddress>>16&0xFF);
	//		Test1[2] = (uint8)(uin32_WriteAddress>>8&0xFF);
	//		Test1[3] = (uint8)(uin32_WriteAddress&0xFF);

			//CAN_Write(23, Test1);

			/*写入数据*/
			Fls_Write(uin32_WriteAddress, &Boot_Flash[0], 256U);
			ui8_TRDATAFlag = 2;
			ui32_TRDATACount = 0;
			st_Uds_Response.ui8_ResCode = UDS_RES_CODE_RCRRP;	/*78*/

		}
	}
	else if((Fls_GetStatus() == FLS_TASK_IDLE_STATE) && (ui8_TRDATAFlag == 2))
	{
		ui32_TRDATACount++;
		if(ui32_TRDATACount == 500)
		{
			ui8_TRDATAFlag = 1;
			ui32_TRDATACount = 0;
			/*回应数据*/
			ui16_pResLen[0U] = 1U;
			ui8_pRes[0U] = ui8_pInd[0U];
			st_Uds_Response.ui8_ResCode = UDS_RES_CODE_PR;	/*正响应*/
			b_Return = E_OK;
		}
	}





	return	b_Return;
}

