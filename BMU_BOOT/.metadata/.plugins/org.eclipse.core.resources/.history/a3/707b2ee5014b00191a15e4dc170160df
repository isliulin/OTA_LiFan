
#include "MAIN.h"

uint8	ui8_Uds_Cmd_Rx_MO;		/*UDS接收MO*/
uint8	ui8_Uds_Cmd_Tx_MO;		/*UDS发送MO*/
uint32	ui32_Uds_Can_Phy_Addr;	/*UDS物理地址*/
uint32	ui32_Uds_Can_Func_Addr;	/*UDS功能地址*/

Struct_Uds_Dcm_Info		st_Uds_Dcm_Info;	/*UDS Dcm信息*/
Struct_Uds_Indication	st_Uds_Indication;	/*UDS Indication信息*/
Struct_Uds_Response		st_Uds_Response;	/*UDS Response信息*/

/*诊断服务配置信息*/
const	Struct_Uds_Cfg_Info	st_Uds_Cfg_Info[UDS_SID_NUMBER] =
{
		{
			0x10U,		/*服务ID*/
			0x03U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x07U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			2U,			/*消息最小长度*/
			2U,			/*消息最大长度*/
			UdsFunc_SID_DSC_Analysis	/*服务函数*/
		},

		{
			0x11U,		/*服务ID*/
			0x03U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x07U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			2U,			/*消息最小长度*/
			2U,			/*消息最大长度*/
			UdsFunc_SID_ER_Analysis	/*服务函数*/
		},

		{
			0x27U,		/*服务ID*/
			0x01U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x06U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			2U,			/*消息最小长度*/
			6U,			/*消息最大长度*/
			UdsFunc_SID_SA_Analysis	/*服务函数*/
		},

		{
			0x28U,		/*服务ID*/
			0x03U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x04U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			3U,			/*消息最小长度*/
			3U,			/*消息最大长度*/
			UdsFunc_SID_CC_Analysis	/*服务函数*/
		},

		{
			0x3EU,		/*服务ID*/
			0x03U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x07U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			2U,			/*消息最小长度*/
			2U,			/*消息最大长度*/
			UdsFunc_SID_TP_Analysis	/*服务函数*/
		},

		{
			0x85U,		/*服务ID*/
			0x03U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x04U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			2U,			/*消息最小长度*/
			2U,			/*消息最大长度*/
			UdsFunc_SID_CDTCS_Analysis	/*服务函数*/
		},

		{
			0x22U,		/*服务ID*/
			0x01U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x07U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			3U,			/*消息最小长度*/
			(UDS_SID_RDBI_DID_NUMBER1 * 2U + 1U),			/*消息最大长度*/
			UdsFunc_SID_RDBI_Analysis	/*服务函数*/
		},

		{
			0x2EU,		/*服务ID*/
			0x01U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x06U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			TRUE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			4U,			/*消息最小长度*/
			255U,		/*消息最大长度*/
			UdsFunc_SID_WDBI_Analysis	/*服务函数*/
		},

		{
			0x31U,		/*服务ID*/
			0x01U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x06U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			4U,			/*消息最小长度*/
			1024U,			/*消息最大长度*/
			UdsFunc_SID_RC_Analysis	/*服务函数*/
		},

		{
			0x34U,		/*服务ID*/
			0x01U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x06U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			3U,			/*消息最小长度*/
			11U,			/*消息最大长度*/
			UdsFunc_SID_RTDD_Analysis	/*服务函数*/
		},

		{
			0x36U,		/*服务ID*/
			0x01U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x06U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			3U,			/*消息最小长度*/
			1024U,			/*消息最大长度*/
			UdsFunc_SID_TRADATA_Analysis	/*服务函数*/
		},

		{
			0x37U,		/*服务ID*/
			0x01U,		/*支持的地址类型*/
						/*物理地址 Bit0―― 1:支持  0:不支持*/
						/*功能地址 Bit1―― 1:支持  0:不支持*/
//			0x06U,		/*支持的session*/
//						/*Default 		Bit0―― 1:支持  0:不支持*/
//						/*Programming 	Bit1―― 1:支持  0:不支持*/
//						/*Extended 		Bit2―― 1:支持  0:不支持*/
//						/*Coding        bit3―― 1:支持  0:不支持*/
//			FALSE,		/*是否需要解密钥	TRUE:需要,	FALSE:不需要*/
			1U,			/*消息最小长度*/
			2U,			/*消息最大长度*/
			UdsFunc_SID_REQTRAEXIT_Analysis	/*服务函数*/
		},
};


/*************************************************************************/
/*
Function:		void UdsFunc_Init(void)

Description: 	此函数用于初始化UDS服务

Parameters: 	void

Return:       	void

Return Values:  无

Remarks:

Example:
*/
void UdsFunc_Init(void)
{
	/*初始化诊断通道*/
#if ECU_TYPE == ECU_VCU
	ui8_Uds_Cmd_Rx_MO = UDS_CMD_RX_MO_EVBUS;
	ui8_Uds_Cmd_Tx_MO = UDS_CMD_TX_MO_EVBUS;
	ui32_Uds_Can_Phy_Addr = UDS_CAN_PHY_ADDR_EVBUS;
	ui32_Uds_Can_Func_Addr = UDS_CAN_FUNC_ADDR_EVBUS;

#elif ECU_TYPE == ECU_VBU
	ui8_Uds_Cmd_Rx_MO = UDS_CMD_RX_MO_EVBUS;
	ui8_Uds_Cmd_Tx_MO = UDS_CMD_TX_MO_EVBUS;
	ui32_Uds_Can_Phy_Addr = UDS_CAN_PHY_ADDR_EVBUS;
	ui32_Uds_Can_Func_Addr = UDS_CAN_FUNC_ADDR_EVBUS;

#elif ECU_TYPE == ECU_BMS
	ui8_Uds_Cmd_Rx_MO = UDS_CMD_RX_MO_INBUS;
	ui8_Uds_Cmd_Tx_MO = UDS_CMD_TX_MO_INBUS;
	ui32_Uds_Can_Phy_Addr = UDS_CAN_PHY_ADDR_INBUS;
	ui32_Uds_Can_Func_Addr = UDS_CAN_FUNC_ADDR_INBUS;
#elif ECU_TYPE == ECU_MCU
	ui8_Uds_Cmd_Rx_MO = UDS_CMD_RX_MO_EVBUS;
	ui8_Uds_Cmd_Tx_MO = UDS_CMD_TX_MO_EVBUS;
	ui32_Uds_Can_Phy_Addr = UDS_CAN_PHY_ADDR_EVBUS;
	ui32_Uds_Can_Func_Addr = UDS_CAN_FUNC_ADDR_EVBUS;

#elif ECU_TYPE == ECU_BMS_FRWK_3
	ui8_Uds_Cmd_Rx_MO = UDS_CMD_RX_MO_INBUS;
	ui8_Uds_Cmd_Tx_MO = UDS_CMD_TX_MO_INBUS;
	ui32_Uds_Can_Phy_Addr = UDS_CAN_PHY_ADDR_INBUS;
	ui32_Uds_Can_Func_Addr = UDS_CAN_FUNC_ADDR_INBUS;

#endif

	TpFunc_Init();				/*TP初始化*/

	/*初始化UDS Indication信息*/
	st_Uds_Indication.ui8_pTA_Type = &st_N_USData_Indication.ui8_N_TAtype;
	st_Uds_Indication.ui8_pMsgData = st_N_USData_Indication.ui8_pMsgData;
	st_Uds_Indication.ui16_pLength = &st_N_USData_Indication.ui16_Length;
	st_Uds_Indication.ui8_pResult = &st_N_USData_Indication.ui8_N_Result;

	/*初始化UDS Response信息*/
	st_Uds_Response.ui8_ResCode = UDS_RES_CODE_INVALID;
	st_Uds_Response.ui8_pMsgData = st_N_USData_Request.ui8_pMsgData;
	st_Uds_Response.ui16_pLength = &st_N_USData_Request.ui16_Length;

	/*初始化Dcm信息*/
	st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;							/*初始化当前UDS任务为空闲*/

	/*初始化SID DSC信息*/
	/*应用层跳转到boot层时，进入编程会话*/
	if(ui32_KeepBSLState_Flag == SYS_KEEP_BSL_STATE)
	{
		st_Uds_SID_DSC_Info.ui8_Active_Session = UDS_PROGRAMMING_SESSION_ACTIVE;	/*初始化工作Session为Default*/
	}
	else
	{
		st_Uds_SID_DSC_Info.ui8_Active_Session = UDS_DEFAULT_SESSION_ACTIVE;		/*进入默认会话*/
	}

	st_Uds_SID_DSC_Info.ui16_Write_EEROM_Delay = UDS_BOOT_STATE_DELAY_TIME;

	/*初始化SID ER信息*/
	st_Uds_SID_ER_Info.b_HardResetFlag = FALSE;								/*初始化硬件复位标志无效*/
	//wxc20180611
	st_Uds_SID_ER_Info.b_SoftResetFlag = FALSE;								/*初始化软件复位标志无效*/

	/*初始化SID SA信息*/
	st_Uds_SID_SA_Info.b_Security_Locked = 0x00;							/*初始化密钥为锁定状态*/
	st_Uds_SID_SA_Info.b_RequestSeedFlag = 0x00;							/*初始化request seed标志清除*/

	if(st_Uds_SID_SA_Info.SeedKeyFlag == 1)
	{
		st_Uds_SID_SA_Info.SA_Counter = 3U;
	}
	else
	{
		st_Uds_SID_SA_Info.SA_Counter = 0U;
	}
	st_Uds_SID_SA_Info.ui32_Boot_State255_Delay = 0U;

	/*初始化SID CC信息*/
	st_Uds_SID_CC_Info.ui8_CommuCtrlFlag = UDS_EN_RX_TX_NCM;				/*初始化Normal使能Rx和Tx标志建立*/
	st_Uds_SID_CC_Info.ui32_Boot_State255_Delay = UDS_BOOT_STATE_DELAY_TIME;	/*初始化Boot State255等待时间*/

	/*初始化SID TP信息*/
	st_Uds_SID_TP_Info.b_TesterPresentFlag = FALSE;							/*初始化诊断仪在线标志无效*/

	/*初始化SID CDTCS信息*/
	st_Uds_SID_CDTCS_Info.ui8_DTCSettingType = UDS_CDTCS_ON;				/*初始化DTC ON*/

	/*初始化SID RC信息*/
	st_Uds_SID_RC_Info.ui8_STR_Flag = FALSE;									/*初始化StartRoutine标志无效*/
	st_Uds_SID_RC_Info.ui8_DID_FF00_Task_FSM = STD_RC_DID_FF00_IDLE_STATE;		/*初始化DID FF00状态机空闲状态*/
	st_Uds_SID_RC_Info.b_PreProgrammingFlag = FALSE;							/*初始化预刷新标志*/
	st_Uds_SID_RC_Info.b_BackUpFlag = FALSE;									/*初始化备份标志位*/
	st_Uds_SID_RC_Info.b_UpdateFlag = TRUE;										/*初始化升级标志位*/

//	uds_vDTC_DetectInit();

	UdsFunc_Service_Enable();	/*使能UDS服务*/
#if (ECU_TYPE == ECU_VCU) || (ECU_TYPE == ECU_VBU)
	for(ucEeprom_Check_Read_Row = UDS_EEPROM_NUM_ROW_START_VALUE;ucEeprom_Check_Read_Row <= UDS_EEPROM_NUM_ROW_START_VALUE + 8;)
	{
		IIC_Read_Row_Status_Deal();
	}
	uds_Dem_Init();
	uds_Task10ms_vDTC_ToAppl_Function();		/*Dem碰撞信号回传*/
	ucEeprom_Check_Read_Row = 0;
#endif
}

/*************************************************************************/
/*
Function:		void UdsFunc_A_PDU_Analysis(void)

Description: 	此函数用于A_PDU解析

Parameters: 	void

Return:       	void

Return Values:  无

Remarks:

Example:
*/
void UdsFunc_A_PDU_Analysis(void)
{
	uint8	ui8_Loop_1;	/*循环计数器*/

	if(st_Uds_Indication.ui8_pResult[0U] == TP_N_OK)	/*收到UDS数据包*/
	{
		st_Uds_Indication.ui8_pResult[0U] = TP_N_PENDING;	/*清除结果标志*/

		st_Uds_SID_TP_Info.b_TesterPresentFlag = TRUE;		/*诊断仪在线标志有效*/
		st_Uds_Dcm_Info.ui16_S3_Timer = UDS_S3_SERVER_MAX;	/*重置S3Server计数器值*/

		st_Uds_Indication.ui8_SID = st_Uds_Indication.ui8_pMsgData[0U];		/*取SID*/

		/*查询是否支持该SID*/
		for(ui8_Loop_1 = 0U; ui8_Loop_1 < UDS_SID_NUMBER; ui8_Loop_1++)
		{
			if(st_Uds_Indication.ui8_SID == st_Uds_Cfg_Info[ui8_Loop_1].ui8_SID)
			{
				break;
			}
		}

		if(ui8_Loop_1 < UDS_SID_NUMBER)	/*查询到符合支持的SID*/
		{
			/*判断地址类型是否支持*/
			if((st_Uds_Indication.ui8_pTA_Type[0U] & st_Uds_Cfg_Info[ui8_Loop_1].ui8_Addr_Support) != 0U)
			{
//				/*判断Session是否支持*/
//				if((st_Uds_SID_DSC_Info.ui8_Active_Session & st_Uds_Cfg_Info[ui8_Loop_1].ui8_Session_Support) != 0U)
//				{
//					/*判断服务无需密钥，或密钥已解锁*/
//					if((st_Uds_Cfg_Info[ui8_Loop_1].b_Security_En == FALSE) || (st_Uds_SID_SA_Info.b_Security_Locked == FALSE))
//					{
						if((st_Uds_Indication.ui16_pLength[0U] >= st_Uds_Cfg_Info[ui8_Loop_1].ui16_DL_Min)
								&& (st_Uds_Indication.ui16_pLength[0U] <= st_Uds_Cfg_Info[ui8_Loop_1].ui16_DL_Max))	/*判断长度是否正确*/
						{
							st_Uds_Response.b_SuppressPosRspBit = FALSE;	/*初始抑制肯定回应标志位为FALSE*/
							st_Uds_Cfg_Info[ui8_Loop_1].pFunc(&st_Uds_Indication.ui8_pMsgData[1U]
							                                    , (st_Uds_Indication.ui16_pLength[0U] - 1U));	/*执行相应SID的服务函数*/
						}
						else
						{
							st_Uds_Response.ui8_ResCode = UDS_RES_CODE_IMLOIF;	/*数据长度错误响应*/
						}
//					}
//					else
//					{
//						st_Uds_Response.ui8_ResCode = UDS_RES_CODE_SAD;	/*服务密钥未解锁响应*/
//					}
//				}
//				else
//				{
//					st_Uds_Response.ui8_ResCode = UDS_RES_CODE_SNSIAS;	/*服务在工作Session下不支持响应*/
//				}
			}
			else	/*不支持该地址类型*/
			{
				__nop();	/*无否定回应*/
			}
		}
		else	/*不支持该SID*/
		{
			st_Uds_Response.ui8_ResCode = UDS_RES_CODE_SNS;	/*不支持该服务响应*/
		}
	}

	if((st_Uds_SID_DSC_Info.ui8_Active_Session != UDS_DEFAULT_SESSION_ACTIVE)
			&& (st_Uds_Response.ui16_pLength[0U] == 0U))	/*如果工作Session不在default session，并且无等待发送的数据*/
	{
		if(st_Uds_Dcm_Info.ui16_S3_Timer > 0U)
		{
			st_Uds_Dcm_Info.ui16_S3_Timer--;
		}

		if(st_Uds_Dcm_Info.ui16_S3_Timer == 0U)			/*S3Server计数器减到0，切换到default Session*/
		{
			st_Uds_SID_TP_Info.b_TesterPresentFlag = FALSE;		/*诊断仪在线标志无效*/
			UdsFunc_ChangeSession_Init();				/*切换session初始化*/
			st_Uds_SID_DSC_Info.ui8_Active_Session = UDS_DEFAULT_SESSION_ACTIVE;
		}
	}
}

/*************************************************************************/
/*
Function:		void UdsFunc_Receiver_Response(void)

Description: 	此函数用于UDS接收端响应

Parameters: 	void

Return:       	void

Return Values:  无

Remarks:

Example:
*/
void UdsFunc_Receiver_Response(void)
{
	if(st_Uds_Response.ui8_ResCode != UDS_RES_CODE_INVALID)	/*判断响应码是否有效*/
	{
		/*判断目标地址为功能地址并且错误代码为SNS，SFNS，ROOR*/
		if((st_Uds_Indication.ui8_pTA_Type[0U] == UDS_ADDR_TYPE_FUNC)
				&& ((st_Uds_Response.ui8_ResCode == UDS_RES_CODE_SNS)
					|| (st_Uds_Response.ui8_ResCode == UDS_RES_CODE_SFNS)
					|| (st_Uds_Response.ui8_ResCode == UDS_RES_CODE_ROOR)))
		{
			st_Uds_Response.ui16_pLength[0U] = 0U;	/*抑制负响应*/
		}
		else
		{
			if(st_Uds_Response.ui8_ResCode == UDS_RES_CODE_PR)	/*判断正响应或负响应*/
			{
				if(st_Uds_Response.b_SuppressPosRspBit == TRUE)	/*判断抑制正响应位是否为TRUE*/
				{
					st_Uds_Response.b_SuppressPosRspBit = FALSE;
					st_Uds_Response.ui16_pLength[0U] = 0U;/*抑制正响应*/
				}
				else
				{
					/*最终回应正响应数据*/
					st_Uds_Response.ui8_pMsgData[0U] = st_Uds_Indication.ui8_SID + 0x40U;
					st_Uds_Response.ui16_pLength[0U] += 1U;	/*增加SID字节长度*/
				}
			}
			else
			{
				if(st_Uds_Response.ui8_ResCode == UDS_RES_CODE_RCRRP)	/*判断是否78 NEG*/
				{

					/*防止78错误响应影响接收到的数据，通过CAN直接发送*/
					st_Uds_Response.ui8_Neg78_Buf[0U] = 0x03U;
					st_Uds_Response.ui8_Neg78_Buf[1U] = 0x7FU;
					st_Uds_Response.ui8_Neg78_Buf[2U] = st_Uds_Indication.ui8_SID;
					st_Uds_Response.ui8_Neg78_Buf[3U] = st_Uds_Response.ui8_ResCode;
					st_Uds_Response.ui8_Neg78_Buf[4U] = 0xAAU;
					st_Uds_Response.ui8_Neg78_Buf[5U] = 0xAAU;
					st_Uds_Response.ui8_Neg78_Buf[6U] = 0xAAU;
					st_Uds_Response.ui8_Neg78_Buf[7U] = 0xAAU;
					CAN_Write(ui8_Uds_Cmd_Tx_MO, &st_Uds_Response.ui8_Neg78_Buf[0U]);
				}
				else
				{
					/*最终回应其他负响应数据*/
					st_Uds_Response.ui16_pLength[0U] = 3U;
					st_Uds_Response.ui8_pMsgData[0U] = 0x7FU;
					st_Uds_Response.ui8_pMsgData[1U] = st_Uds_Indication.ui8_SID;
					st_Uds_Response.ui8_pMsgData[2U] = st_Uds_Response.ui8_ResCode;
				}
			}
		}

		st_Uds_Response.ui8_ResCode = UDS_RES_CODE_INVALID;	/*响应码无效*/
		CAN_MOs_TXPND_Reset(ui8_Uds_Cmd_Tx_MO);	/*为了复位前能够有响应，发送数据前清除MO发送完成标志*/
	}
}

/*************************************************************************/
/*
Function:		void UdsFunc_Receiver_Appl_Deal(void)

Description: 	此函数用于UDS接收端Appl任务处理

Parameters: 	void

Return:       	void

Return Values:  无

Remarks:

Example:
*/
void UdsFunc_Receiver_Appl_Deal(void)
{
	uint8 ui8_Return;

	switch(st_Uds_Dcm_Info.ui8_Cur_Task)	/*UDS Dcm任务状态机*/
	{
		case UDS_TASK_IDLE:		/*空闲状态*/
		{
			break;
		}

		case UDS_TASK_SID_DSC:	/*DiagnosticSessionControl任务*/
		{
			ui8_Return = UdsFunc_SID_DSC_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_ER:	/*ECUReset任务*/
		{
			ui8_Return = UdsFunc_SID_ER_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_SA:	/*SecurityAccess任务*/
		{
			ui8_Return = UdsFunc_SID_SA_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_CC:	/*CommunicationControl任务*/
		{
			ui8_Return = UdsFunc_SID_CC_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_TP:	/*TesterPresent任务*/
		{
			ui8_Return = UdsFunc_SID_TP_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_CDTCS:	/*ControlDTCSetting任务*/
		{
			ui8_Return = UdsFunc_SID_CDTCS_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_RDBI:	/*ReadDataByIdentifier任务*/
		{
			ui8_Return = UdsFunc_SID_RDBI_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_WDBI:	/*WriteDataByIdentifier任务*/
		{
			ui8_Return = UdsFunc_SID_WDBI_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_RC:	/*RoutineControl任务*/
		{
			ui8_Return = UdsFunc_SID_RC_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_RTDD:
		{
			CAN_Write(125, st_Uds_Indication.ui8_pMsgData[1U]);
			ui8_Return = UdsFunc_SID_RTDD_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_TRADATA:
		{
			ui8_Return = UdsFunc_SID_TRADATA_Callback(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		case UDS_TASK_SID_REQTRAEXIT:
		{
			ui8_Return = UdsFunc_SID_REQTRAEXIT_Appl_Deal(&st_Uds_Indication.ui8_pMsgData[1U],
					&st_Uds_Response.ui8_pMsgData[1U], &st_Uds_Response.ui16_pLength[0U]);

			if(ui8_Return == E_OK)	/*函数执行完毕*/
			{
				st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;	/*跳转空闲状态*/
			}
			break;
		}

		default:
		{
			st_Uds_Dcm_Info.ui8_Cur_Task = UDS_TASK_IDLE;
		}
	}
}

/*************************************************************************/
/*
Function:		void UdsFunc_Receiver_Task(void)

Description: 	此函数用于UDS接收端任务处理

Parameters: 	void

Return:       	void

Return Values:  无

Remarks:

Example:
*/
void UdsFunc_Receiver_Task(void)
{
	TpFunc_Task();				/*TP任务处理*/

	if(st_Uds_Dcm_Info.b_Service_Enable == TRUE)	/*UDS服务使能时才执行UDS任务*/
	{
		UdsFunc_A_PDU_Analysis();		/*A_PDU解析*/
		UdsFunc_Receiver_Appl_Deal();	/*Appl任务处理*/
		UdsFunc_Receiver_Response();	/*接收端响应*/
	}

//	uds_Task10ms_vDTC_Function();		/*Dem*/
}

/*************************************************************************/
/*
Function:		void UdsFunc_Service_Enable(void)

Description: 	此函数用于使能UDS服务

Parameters: 	void

Return:       	void

Return Values:  无

Remarks:

Example:
*/
void UdsFunc_Service_Enable(void)
{
	st_Uds_Dcm_Info.b_Service_Enable = TRUE;
}

/*************************************************************************/
/*
Function:		void UdsFunc_Service_Disnable(void)

Description: 	此函数用于禁止UDS服务

Parameters: 	void

Return:       	void

Return Values:  无

Remarks:

Example:
*/
void UdsFunc_Service_Disnable(void)
{
	st_Uds_Dcm_Info.b_Service_Enable = FALSE;
}
