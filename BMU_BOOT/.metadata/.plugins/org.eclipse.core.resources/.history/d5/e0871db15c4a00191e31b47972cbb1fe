/*
 * Crc_Algorithm.c
 *
 *  Created on: 2018-6-15
 *      Author: Administrator
 */
#include "MAIN.h"

//CRC32
/*
 * CRC校验算法,查表法
 * <kerndev@foxmail.com>
 */


static unsigned long table[256];

//位逆转
static unsigned long bitrev(unsigned long input, int bw)
{
    int i;
    unsigned long var;
    var = 0;
    for(i=0;i<bw;i++)
    {
        if(input & 0x01)
        {
            var |= 1<<(bw-1-i);
        }
        input>>=1;
    }
    return var;
}

//码表生成
//如:X32+X26+...X1+1,poly=(1<<26)|...|(1<<1)|(1<<0)
void crc32_init(void)
{
    int i;
    int j;
    unsigned long c;
    unsigned long poly;

    poly = 0x4C11DB7;			/*IEEE802.3*/

    poly=bitrev(poly,32);
    for(i=0; i<256; i++)
    {
        c = i;
        for (j=0; j<8; j++)
        {
            if(c&1)
            {
                c=poly^(c>>1);
            }
            else
            {
                c=c>>1;
            }
        }
        table[i] = c;

    }
}


//CRC32调用此函数
unsigned long crc = 0xFFFFFFFF;
unsigned long crc32(void* input, int len)
{
    int i;
    unsigned char index;
    unsigned char* pch;


    pch = (unsigned char*)input;
    for(i=0;i<len;i++)
    {
        index = (unsigned char)(crc^*pch);
        crc = (crc>>8)^table[index];
        pch++;
    }
    crc^= 0xFFFFFFFF;
    return crc;
}

//CRC8调用此函数
unsigned char crc(unsigned char *data, unsigned char len)
{
	unsigned char result;
	unsigned char i;
	unsigned char mask;
	unsigned char j;
	unsigned char temp;
	unsigned char poly;

	result=0xFF;
	for(i=0; i<len; i++)
	{
		mask=0x80;
		temp=data[i];
		for(j=0; j<8; j++)
		{
			if(temp & mask)	  //bit is 1
			{
				poly=0x1c;
				if(result & 0x80)
				{
					poly=1;
				}
				result= ((result<<1) | 0x01) ^ poly;

			}else
			{
			 	poly=0;
				if(result & 0x80)
				{
					poly=0x1D;
				}
				result= ((result<<1)) ^ poly;

			}
			mask=mask>>1;
		}
	}
	return ~result;
}


